#include <iostream>
#include <cmath>
#include <iomanip>

// Структура для представления точки
struct Point {
    double x;
    double y;
};

// Структура для представления прямой в виде Ax + By + C = 0
struct Line {
    double A;
    double B;
    double C;
};

// Функция для нахождения расстояния от точки до прямой
double distancePointToLine(Point p, Line l) {
    return std::abs(l.A * p.x + l.B * p.y + l.C) / std::sqrt(l.A * l.A + l.B * l.B);
}

// Функция для нахождения точки пересечения двух прямых
Point intersectionPoint(Line l1, Line l2) {
    Point p;
    double det = l1.A * l2.B - l2.A * l1.B;
    if (det == 0) {
        std::cerr << "Прямые параллельны или совпадают" << std::endl;
        p.x = p.y = NAN;
    } else {
        p.x = (l2.B * l1.C - l1.B * l2.C) / det;
        p.y = (l1.A * l2.C - l2.A * l1.C) / det;
    }
    return p;
}

// Функция для нахождения расстояния между двумя точками
double distanceBetweenPoints(Point p1, Point p2) {
    return std::sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));
}

// Функция для нахождения угла между двумя прямыми
double angleBetweenLines(Line l1, Line l2) {
    double dotProduct = l1.A * l2.A + l1.B * l2.B;
    double magnitude1 = std::sqrt(l1.A * l1.A + l1.B * l1.B);
    double magnitude2 = std::sqrt(l2.A * l2.A + l2.B * l2.B);
    return std::acos(dotProduct / (magnitude1 * magnitude2)) * 180.0 / M_PI;
}

int main() {
    // Пример данных
    Line l1 = {1, -1, 0}; // Прямая 1: x - y = 0
    Line l2 = {1, 2, -5}; // Прямая 2: x + 2y - 5 = 0
    Point p = {3, 2}; // Точка (3, 2)

    // Нахождение расстояния от точки до прямых
    double distToL1 = distancePointToLine(p, l1);
    double distToL2 = distancePointToLine(p, l2);

    // Нахождение точки пересечения прямых
    Point intersection = intersectionPoint(l1, l2);

    // Нахождение расстояния от точки до точки пересечения прямых
    double distToIntersection = distanceBetweenPoints(p, intersection);

    // Нахождение угла между прямыми
    double angle = angleBetweenLines(l1, l2);

    // Вывод результатов
    std::cout << std::fixed << std::setprecision(2);
    std::cout << "Расстояние от точки до прямой 1: " << distToL1 << std::endl;
    std::cout << "Расстояние от точки до прямой 2: " << distToL2 << std::endl;
    std::cout << "Точка пересечения прямых: (" << intersection.x << ", " << intersection.y << ")" << std::endl;
    std::cout << "Расстояние от точки до точки пересечения прямых: " << distToIntersection << std::endl;
    std::cout << "Угол между прямыми: " << angle << " градусов" << std::endl;

    return 0;
}
